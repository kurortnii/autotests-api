{"name": "Delete exercise", "status": "broken", "statusDetails": {"message": "httpx.RemoteProtocolError: Server disconnected without sending a response.", "trace": "@contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        global HTTPCORE_EXC_MAP\n        if len(HTTPCORE_EXC_MAP) == 0:\n            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()\n        try:\n>           yield\n\n.venv/lib/python3.12/site-packages/httpx/_transports/default.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.12/site-packages/httpx/_transports/default.py:250: in handle_request\n    resp = self._pool.handle_request(req)\n.venv/lib/python3.12/site-packages/httpcore/_sync/connection_pool.py:256: in handle_request\n    raise exc from None\n.venv/lib/python3.12/site-packages/httpcore/_sync/connection_pool.py:236: in handle_request\n    response = connection.handle_request(\n.venv/lib/python3.12/site-packages/httpcore/_sync/http_proxy.py:206: in handle_request\n    return self._connection.handle_request(proxy_request)\n.venv/lib/python3.12/site-packages/httpcore/_sync/connection.py:103: in handle_request\n    return self._connection.handle_request(request)\n.venv/lib/python3.12/site-packages/httpcore/_sync/http11.py:136: in handle_request\n    raise exc\n.venv/lib/python3.12/site-packages/httpcore/_sync/http11.py:106: in handle_request\n    ) = self._receive_response_headers(**kwargs)\n.venv/lib/python3.12/site-packages/httpcore/_sync/http11.py:177: in _receive_response_headers\n    event = self._receive_event(timeout=timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <HTTP11Connection ['http://127.0.0.1:9090', CLOSED, Request Count: 1]>\ntimeout = 100\n\n    def _receive_event(\n        self, timeout: float | None = None\n    ) -> h11.Event | type[h11.PAUSED]:\n        while True:\n            with map_exceptions({h11.RemoteProtocolError: RemoteProtocolError}):\n                event = self._h11_state.next_event()\n    \n            if event is h11.NEED_DATA:\n                data = self._network_stream.read(\n                    self.READ_NUM_BYTES, timeout=timeout\n                )\n    \n                # If we feed this case through h11 we'll raise an exception like:\n                #\n                #     httpcore.RemoteProtocolError: can't handle event type\n                #     ConnectionClosed when role=SERVER and state=SEND_RESPONSE\n                #\n                # Which is accurate, but not very informative from an end-user\n                # perspective. Instead we handle this case distinctly and treat\n                # it as a ConnectError.\n                if data == b\"\" and self._h11_state.their_state == h11.SEND_RESPONSE:\n                    msg = \"Server disconnected without sending a response.\"\n>                   raise RemoteProtocolError(msg)\nE                   httpcore.RemoteProtocolError: Server disconnected without sending a response.\n\n.venv/lib/python3.12/site-packages/httpcore/_sync/http11.py:231: RemoteProtocolError\n\nThe above exception was the direct cause of the following exception:\n\npublic_users_client = <clients.users.public_users_client.PublicUsersClient object at 0x107ef4e60>\n\n    @pytest.fixture\n    def function_user(public_users_client: PublicUsersClient) -> UserFixture:\n        request = CreateUserRequestSchema()\n>       response = public_users_client.create_user(request)\n\nfixtures/users.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nclients/users/public_users_client.py:24: in create_user\n    response = self.create_user_api(request)\nclients/users/public_users_client.py:21: in create_user_api\n    return self.post(\"/api/v1/users\", json=request.model_dump(by_alias=True))\nclients/api_client.py:44: in post\n    return self.client.post(url, json=json, data=data, files=files)\n.venv/lib/python3.12/site-packages/httpx/_client.py:1144: in post\n    return self.request(\n.venv/lib/python3.12/site-packages/httpx/_client.py:825: in request\n    return self.send(request, auth=auth, follow_redirects=follow_redirects)\n.venv/lib/python3.12/site-packages/httpx/_client.py:914: in send\n    response = self._send_handling_auth(\n.venv/lib/python3.12/site-packages/httpx/_client.py:942: in _send_handling_auth\n    response = self._send_handling_redirects(\n.venv/lib/python3.12/site-packages/httpx/_client.py:979: in _send_handling_redirects\n    response = self._send_single_request(request)\n.venv/lib/python3.12/site-packages/httpx/_client.py:1014: in _send_single_request\n    response = transport.handle_request(request)\n.venv/lib/python3.12/site-packages/httpx/_transports/default.py:249: in handle_request\n    with map_httpcore_exceptions():\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:158: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        global HTTPCORE_EXC_MAP\n        if len(HTTPCORE_EXC_MAP) == 0:\n            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.RemoteProtocolError: Server disconnected without sending a response.\n\n.venv/lib/python3.12/site-packages/httpx/_transports/default.py:118: RemoteProtocolError"}, "start": 1751277099802, "stop": 1751277099802, "uuid": "fe547acb-aab7-4f55-b358-e8d30931011f", "historyId": "4a1e06ad18a3a9a05cfac0b37204f7f6", "testCaseId": "4a1e06ad18a3a9a05cfac0b37204f7f6", "fullName": "tests.exercises.test_exercises.TestExercises#test_delete_exercise", "labels": [{"name": "feature", "value": "Exercises"}, {"name": "epic", "value": "LMS service"}, {"name": "subSuite", "value": "Delete entity"}, {"name": "tag", "value": "DELETE_ENTITY"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Delete entity"}, {"name": "tag", "value": "REGRESSION"}, {"name": "suite", "value": "Exercises"}, {"name": "parentSuite", "value": "LMS service"}, {"name": "tag", "value": "EXERCISES"}, {"name": "tag", "value": "exercises"}, {"name": "tag", "value": "regression"}, {"name": "host", "value": "MacBook-Air-Rik.local"}, {"name": "thread", "value": "11098-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.exercises.test_exercises"}]}